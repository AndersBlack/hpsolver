(define (domain someDomain)
	(:requirements :negative-preconditions :hierarchy)
	(:predicates
		(turnA)
		(turnB)
		(lt1)
		(lt2)
		(l0)
		(l1)
	)

	(:task SG1
		:parameters ()
	)

	(:task SG2
		:parameters ()
	)

	(:method G1_S2t1_S_0_1_1_1_1
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t1G1))
		 (task1 (SG1))
		 (task2 (p0G1))
		 (task3 (p1G1))
		 (task4 (p1G1))
		 (task5 (p1G1))
		 (task6 (p1G1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
			(< task4 task5)
			(< task5 task6)
		)
	)

	(:method G1_S2t2_S_1
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t2G1))
		 (task1 (SG1))
		 (task2 (p1G1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:method G1_S2t1_0_1_1_1_1
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t1G1))
		 (task1 (p0G1))
		 (task2 (p1G1))
		 (task3 (p1G1))
		 (task4 (p1G1))
		 (task5 (p1G1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
			(< task4 task5)
		)
	)

	(:method G1_S2t2_1
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t2G1))
		 (task1 (p1G1))
		)
		:ordering (and
			(< task0 task1)
		)
	)

	(:method G2_S2t1_S_1
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t1G2))
		 (task1 (SG2))
		 (task2 (p1G2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:method G2_S2t2_S_1_1_1_1_0
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t2G2))
		 (task1 (SG2))
		 (task2 (p1G2))
		 (task3 (p1G2))
		 (task4 (p1G2))
		 (task5 (p1G2))
		 (task6 (p0G2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
			(< task4 task5)
			(< task5 task6)
		)
	)

	(:method G2_S2t1_1
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t1G2))
		 (task1 (p1G2))
		)
		:ordering (and
			(< task0 task1)
		)
	)

	(:method G2_S2t2_1_1_1_1_0
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t2G2))
		 (task1 (p1G2))
		 (task2 (p1G2))
		 (task3 (p1G2))
		 (task4 (p1G2))
		 (task5 (p0G2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
			(< task4 task5)
		)
	)

	(:action epsilon
		:parameters ()
		:precondition ()
		:effect ()
	)

	(:action t1G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lt1)
			)
	)

	(:action t2G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lt2)
			)
	)

	(:action p0G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(l0)
			)
	)

	(:action p1G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(l1)
			)
	)

	(:action t1G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lt1)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lt1))
			)
	)

	(:action t2G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lt2)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lt2))
			)
	)

	(:action p0G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(l0)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (l0))
			)
	)

	(:action p1G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(l1)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (l1))
			)
	)
)
