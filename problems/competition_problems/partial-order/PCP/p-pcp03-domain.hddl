(define (domain someDomain)
	(:requirements :negative-preconditions :hierarchy)
	(:predicates
		(turnA)
		(turnB)
		(lt1)
		(lt2)
		(lt3)
		(la)
		(lb)
	)

	(:task SG1
		:parameters ()
	)

	(:task SG2
		:parameters ()
	)

	(:method G1_S2t1_S_a
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t1G1))
		 (task1 (SG1))
		 (task2 (aG1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:method G1_S2t2_S_b_a
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t2G1))
		 (task1 (SG1))
		 (task2 (bG1))
		 (task3 (aG1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)

	(:method G1_S2t3_S_a_b_b
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t3G1))
		 (task1 (SG1))
		 (task2 (aG1))
		 (task3 (bG1))
		 (task4 (bG1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
		)
	)

	(:method G1_S2t1_a
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t1G1))
		 (task1 (aG1))
		)
		:ordering (and
			(< task0 task1)
		)
	)

	(:method G1_S2t2_b_a
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t2G1))
		 (task1 (bG1))
		 (task2 (aG1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:method G1_S2t3_a_b_b
		:parameters ()
		:task (SG1)
		:subtasks (and
		 (task0 (t3G1))
		 (task1 (aG1))
		 (task2 (bG1))
		 (task3 (bG1))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)

	(:method G2_S2t1_S_a_a_b
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t1G2))
		 (task1 (SG2))
		 (task2 (aG2))
		 (task3 (aG2))
		 (task4 (bG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
			(< task3 task4)
		)
	)

	(:method G2_S2t2_S_a_a
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t2G2))
		 (task1 (SG2))
		 (task2 (aG2))
		 (task3 (aG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)

	(:method G2_S2t3_S_b_b
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t3G2))
		 (task1 (SG2))
		 (task2 (bG2))
		 (task3 (bG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)

	(:method G2_S2t1_a_a_b
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t1G2))
		 (task1 (aG2))
		 (task2 (aG2))
		 (task3 (bG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
			(< task2 task3)
		)
	)

	(:method G2_S2t2_a_a
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t2G2))
		 (task1 (aG2))
		 (task2 (aG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:method G2_S2t3_b_b
		:parameters ()
		:task (SG2)
		:subtasks (and
		 (task0 (t3G2))
		 (task1 (bG2))
		 (task2 (bG2))
		)
		:ordering (and
			(< task0 task1)
			(< task1 task2)
		)
	)

	(:action epsilon
		:parameters ()
		:precondition ()
		:effect ()
	)

	(:action t1G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lt1)
			)
	)

	(:action t2G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lt2)
			)
	)

	(:action t3G1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lt3)
			)
	)

	(:action aG1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(la)
			)
	)

	(:action bG1
		:parameters ()
		:precondition 
			(and
				(turnA)
			)
		:effect
			(and
				(not (turnA))
				(turnB)
				(lb)
			)
	)

	(:action t1G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lt1)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lt1))
			)
	)

	(:action t2G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lt2)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lt2))
			)
	)

	(:action t3G2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lt3)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lt3))
			)
	)

	(:action aG2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(la)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (la))
			)
	)

	(:action bG2
		:parameters ()
		:precondition 
			(and
				(turnB)
				(lb)
			)
		:effect
			(and
				(not (turnB))
				(turnA)
				(not (lb))
			)
	)
)
